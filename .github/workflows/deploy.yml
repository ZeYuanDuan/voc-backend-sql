name: Deploy to EC2

on:
  push:
    branches:
      - CICD-pipeline

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Add SSH key and setup ssh-agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Deploy to EC2
        env:
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          PORT: ${{ secrets.PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_TEST_NAME: ${{ secrets.DB_TEST_NAME }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL: ${{ secrets.GOOGLE_CALLBACK_URL }}
          GOOGLE_TRANSLATION_KEY: ${{ secrets.GOOGLE_TRANSLATION_KEY }}
          WORDNIK_KEY: ${{ secrets.WORDNIK_KEY }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_MAX_CONNECTIONS: ${{ secrets.REDIS_MAX_CONNECTIONS }}
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # 確保進入正確目錄
            cd /home/ec2-user/myproject

            # 如果目錄中已經存在且是 Git 倉庫，拉取更新；否則清空目錄並克隆倉庫
            if [ -d .git ]; then
              git pull origin CICD-pipeline
            else
              rm -rf /home/ec2-user/myproject/*
              git clone -b CICD-pipeline https://github.com/${{ github.repository }}.git .
            fi

            # 確認 docker-compose.yaml 文件存在於當前目錄
            if [ ! -f /home/ec2-user/myproject/docker-compose.yaml ]; then
              echo "docker-compose.yaml not found in /home/ec2-user/myproject!"
              exit 1
            fi

            # 導出環境變數並運行 Docker Compose
            export SESSION_SECRET=${SESSION_SECRET}
            export JWT_SECRET=${JWT_SECRET}
            export PORT=${PORT}
            export DB_USERNAME=${DB_USERNAME}
            export DB_PASSWORD=${DB_PASSWORD}
            export DB_NAME=${DB_NAME}
            export DB_HOST=${DB_HOST}
            export DB_TEST_NAME=${DB_TEST_NAME}
            export GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
            export GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
            export GOOGLE_CALLBACK_URL=${GOOGLE_CALLBACK_URL}
            export GOOGLE_TRANSLATION_KEY=${GOOGLE_TRANSLATION_KEY}
            export WORDNIK_KEY=${WORDNIK_KEY}
            export REDIS_PASSWORD=${REDIS_PASSWORD}
            export REDIS_HOST=${REDIS_HOST}
            export REDIS_PORT=${REDIS_PORT}
            export REDIS_MAX_CONNECTIONS=${REDIS_MAX_CONNECTIONS}

            # 構建並啟動容器
            docker-compose -f docker-compose.yaml down
            docker-compose -f docker-compose.yaml up --build -d
          EOF
