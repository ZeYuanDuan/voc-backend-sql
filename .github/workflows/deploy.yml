name: CI/CD Pipeline

on:
  push:
    branches:
      - CICD-pipeline

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Pull from GitHub on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << EOF
            # 確保用戶目錄正確，切換到 Ubuntu 的預設用戶目錄
            if [ ! -d /home/ubuntu/myproject ]; then
              mkdir -p /home/ubuntu/myproject
            fi

            cd /home/ubuntu/myproject

            # 檢查是否已經初始化 Git 倉庫，若無則初始化並克隆
            if [ ! -d .git ]; then
              git clone https://github.com/${{ github.repository }}.git .
              git checkout CICD-pipeline
            else
              git pull origin CICD-pipeline
            fi
          EOF

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t myapp .

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Deploy to EC2
        env:
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          PORT: ${{ secrets.PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_TEST_NAME: ${{ secrets.DB_TEST_NAME }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL: ${{ secrets.GOOGLE_CALLBACK_URL }}
          GOOGLE_TRANSLATION_KEY: ${{ secrets.GOOGLE_TRANSLATION_KEY }}
          WORDNIK_KEY: ${{ secrets.WORDNIK_KEY }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_MAX_CONNECTIONS: ${{ secrets.REDIS_MAX_CONNECTIONS }}

        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << EOF
            cd /home/ubuntu/myproject

            # 導出環境變數
            export SESSION_SECRET=${SESSION_SECRET}
            export JWT_SECRET=${JWT_SECRET}
            export PORT=${PORT}
            export DB_USERNAME=${DB_USERNAME}
            export DB_PASSWORD=${DB_PASSWORD}
            export DB_NAME=${DB_NAME}
            export DB_HOST=${DB_HOST}
            export DB_TEST_NAME=${DB_TEST_NAME}
            export GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
            export GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
            export GOOGLE_CALLBACK_URL=${GOOGLE_CALLBACK_URL}
            export GOOGLE_TRANSLATION_KEY=${GOOGLE_TRANSLATION_KEY}
            export WORDNIK_KEY=${WORDNIK_KEY}
            export REDIS_PASSWORD=${REDIS_PASSWORD}
            export REDIS_HOST=${REDIS_HOST}
            export REDIS_PORT=${REDIS_PORT}
            export REDIS_MAX_CONNECTIONS=${REDIS_MAX_CONNECTIONS}

            # 使用 Docker Compose 構建並啟動容器
            docker compose down
            docker compose up --build -d
          EOF
# 為了部屬硬加註解