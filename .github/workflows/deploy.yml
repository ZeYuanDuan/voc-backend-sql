name: Deploy to EC2

on:
  push:
    branches:
      - CICD-pipeline

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t zeyuanduan/voc-project:latest .
          docker push zeyuanduan/voc-project:latest

      - name: Install SSH client
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Create .env file
        run: |
          echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" > .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_TEST_NAME=${{ secrets.DB_TEST_NAME }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "GOOGLE_CALLBACK_URL=${{ secrets.GOOGLE_CALLBACK_URL }}" >> .env
          echo "GOOGLE_TRANSLATION_KEY=${{ secrets.GOOGLE_TRANSLATION_KEY }}" >> .env
          echo "WORDNIK_KEY=${{ secrets.WORDNIK_KEY }}" >> .env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
          echo "REDIS_MAX_CONNECTIONS=${{ secrets.REDIS_MAX_CONNECTIONS }}" >> .env

      - name: Copy files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ${{ secrets.EC2_KEY }} docker-compose.yml $EC2_USER@$EC2_HOST:/home/ec2-user/myproject/
          scp -o StrictHostKeyChecking=no -i ${{ secrets.EC2_KEY }} .env $EC2_USER@$EC2_HOST:/home/ec2-user/myproject/

      - name: Deploy to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            # 確保目錄存在
            mkdir -p /home/ec2-user/myproject

            # 進入目錄
            cd /home/ec2-user/myproject

            # 確認 docker-compose.yml 文件存在
            if [ ! -f docker-compose.yml ]; then
              echo "docker-compose.yml not found!"
              exit 1
            fi

            # 拉取最新映像
            docker-compose pull

            # 停止並移除舊容器
            docker-compose down

            # 啟動新容器
            docker-compose up -d
          EOF
